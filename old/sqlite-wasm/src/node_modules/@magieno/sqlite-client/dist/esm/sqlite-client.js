var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { SqliteClientTypeEnum } from "./enums/sqlite-client-type.enum";
import { InMainThreadSqliteAdapter } from "./adapters/in-main-thread.sqlite-adapter";
import { ReturnValueEnum } from "./enums/return-value.enum";
import { RowModeEnum } from "./enums/row-mode.enum";
import { InWorkerSqliteAdapter } from "./adapters/in-worker.sqlite-adapter";
import { SqliteClientExtension } from "./sqlite-client-extension";
export * from "./adapters/adapters";
export * from "./enums/enums";
export * from "./interfaces/interfaces";
export * from "./messages/messages";
export * from "./proxies/proxies";
export * from "./types/types";
export * from "./sqlite-client-extension";
export class SqliteClient {
    constructor(options) {
        this.options = options;
        switch (this.options.type) {
            case SqliteClientTypeEnum.MemoryMainThread:
                this.adapter = new InMainThreadSqliteAdapter(this.options);
                break;
            case SqliteClientTypeEnum.OpfsWorker:
                if (this.options.emitEventsToMagienoSqliteChromeExtension === true) {
                    SqliteClientExtension.register(this.options.sqliteWorkerPath);
                }
            case SqliteClientTypeEnum.MemoryWorker:
            case SqliteClientTypeEnum.OpfsSahWorker:
                this.adapter = new InWorkerSqliteAdapter(this.options);
                break;
            default:
                throw new Error(`Unknown sqlite client type for options: '${this.options}.`);
        }
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.adapter.init();
        });
    }
    executeSql(sqlStatement_1) {
        return __awaiter(this, arguments, void 0, function* (sqlStatement, bindParameters = [], returnValue = ReturnValueEnum.ResultRows, rowMode = RowModeEnum.Array) {
            if (this.adapter === undefined) {
                throw new Error("You need to call `init` before calling `executeSql`.");
            }
            return this.adapter.executeSql(sqlStatement, bindParameters, returnValue, rowMode);
        });
    }
}
//# sourceMappingURL=sqlite-client.js.map