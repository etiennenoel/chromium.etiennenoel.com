var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { SqliteClientTypeEnum } from "./enums/sqlite-client-type.enum";
import { ReturnValueEnum, RowModeEnum, SqliteClient } from "./sqlite-client";
export class SqliteClientExtension {
    static dispatchEvent(event) {
        window.dispatchEvent(new CustomEvent("MAGIENO_SQLITE_CLIENT_TO_EXTENSION", {
            detail: event,
        }));
    }
    static registerWorkerPath(sqliteWorkerPath) {
        SqliteClientExtension.workerPath = sqliteWorkerPath;
        caches.open("magieno").then(cache => {
            cache.put("sqlite-worker", new Response(sqliteWorkerPath));
        });
    }
    static register(workerPath) {
        SqliteClientExtension.registerWorkerPath(workerPath);
        window.addEventListener('MAGIENO_SQLITE_CLIENT_FROM_EXTENSION', (event) => __awaiter(this, void 0, void 0, function* () {
            yield SqliteClientExtension.receiveEvent(event);
        }));
    }
    static receiveEvent(event) {
        return __awaiter(this, void 0, void 0, function* () {
            const detail = event.detail;
            switch (detail.type) {
                case "INIT":
                    if (SqliteClientExtension.workerPath === undefined) {
                        SqliteClientExtension.dispatchEvent({ "type": "INIT_RESULT", "uniqueId": detail.uniqueId, "error": "Cannot find the SqliteWorkerPath. For security reasons, you must manually register it in your page: `SqliteClientExtension.registerWorkerPath('/path/to/sqlite-worker.mjs')`" });
                        return;
                    }
                    SqliteClientExtension.dispatchEvent({ "type": "INIT_RESULT", "uniqueId": detail.uniqueId });
                    return;
                case "EXECUTE_SQL_QUERY":
                    const client = new SqliteClient({
                        type: SqliteClientTypeEnum.OpfsWorker,
                        filename: detail.filename,
                        flags: "c",
                        sqliteWorkerPath: SqliteClientExtension.workerPath,
                    });
                    yield client.init();
                    const response = yield client.executeSql(detail.query, [], ReturnValueEnum.ResultRows, RowModeEnum.Object);
                    SqliteClientExtension.dispatchEvent({ "type": "EXECUTE_SQL_QUERY_RESULT", "uniqueId": detail.uniqueId, "filename": detail.filename, "response": response });
                    return;
            }
        });
    }
}
//# sourceMappingURL=sqlite-client-extension.js.map