var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ReturnValueEnum } from "../enums/return-value.enum";
import { RowModeEnum } from "../enums/row-mode.enum";
import { SqliteClientWorkerProxy } from "../proxies/sqlite-client-worker.proxy";
export class InWorkerSqliteAdapter {
    constructor(options) {
        this.options = options;
        this.proxy = new SqliteClientWorkerProxy(options);
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.proxy.init();
        });
    }
    executeSql(sqlStatement_1) {
        return __awaiter(this, arguments, void 0, function* (sqlStatement, bindParameters = [], returnValue = ReturnValueEnum.ResultRows, rowMode = RowModeEnum.Array) {
            return this.proxy.executeSql(sqlStatement, bindParameters, returnValue, rowMode);
        });
    }
}
//# sourceMappingURL=in-worker.sqlite-adapter.js.map