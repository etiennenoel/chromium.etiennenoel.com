var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { default as sqlite3InitModule } from "@sqlite.org/sqlite-wasm";
import { ReturnValueEnum } from "../enums/return-value.enum";
import { RowModeEnum } from "../enums/row-mode.enum";
export class InMainThreadSqliteAdapter {
    constructor(options) {
        this.options = options;
    }
    getDB() {
        return this.db;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.sqlite3 = yield sqlite3InitModule({
                print: console.log,
                printErr: console.error,
            });
            this.db = new this.sqlite3.oo1.DB(this.filename, this.flags);
        });
    }
    executeSql(sqlStatement_1) {
        return __awaiter(this, arguments, void 0, function* (sqlStatement, bindParameters = [], returnValue = ReturnValueEnum.ResultRows, rowMode = RowModeEnum.Array) {
            return this.db.exec({
                sql: sqlStatement,
                bind: bindParameters,
                returnValue: returnValue,
                rowMode: rowMode,
            });
        });
    }
}
//# sourceMappingURL=in-main-thread.sqlite-adapter.js.map