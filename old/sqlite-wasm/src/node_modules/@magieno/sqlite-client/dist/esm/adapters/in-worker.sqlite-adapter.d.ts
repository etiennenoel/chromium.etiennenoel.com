import { SqliteAdapterInterface } from "../interfaces/sqlite-adapter.interface";
import { ReturnValueEnum } from "../enums/return-value.enum";
import { RowModeEnum } from "../enums/row-mode.enum";
import { SqliteClientWorkerProxy } from "../proxies/sqlite-client-worker.proxy";
import { OpfsWorkerSqliteOptionsInterface } from "../interfaces/opfs-worker-sqlite-options.interface";
import { MemoryWorkerSqliteOptionsInterface } from "../interfaces/memory-worker-sqlite-options.interface";
import { OpfsSahWorkerSqliteOptionsInterface } from "../interfaces/opfs-sah-worker-sqlite-options.interface";
export declare class InWorkerSqliteAdapter implements SqliteAdapterInterface {
    private readonly options;
    proxy: SqliteClientWorkerProxy;
    constructor(options: MemoryWorkerSqliteOptionsInterface | OpfsWorkerSqliteOptionsInterface | OpfsSahWorkerSqliteOptionsInterface);
    init(): Promise<any>;
    executeSql(sqlStatement: string, bindParameters?: (string | number)[], returnValue?: ReturnValueEnum, rowMode?: RowModeEnum | number): Promise<any>;
}
